package main

import "fmt"

/*
使用 位运算 求 a 和 b 的和
两个整数a和b，其中0≤a, b≤100。

提示:
a+b = a ^ b + (a&b)<<1
异或运算 ^：相同位不同则为1，相同则为0
与运算 &：相同位的两个数字都为1，则为1；若有一个不为1，则为0
按位左移 <<：左移一位其实就相当于将原数值乘以2，左移不会影响操作数的符号位
a^b是不考虑进位时加法结果。当二进制位同时为1时，才有进位，因此 (a&b)<<1是进位产生的值，称为进位补偿。将两者相加便是完整加法结果。

挑战:
去除约束条件 0<=a,b<=100
不使用运算符 + , -
*/
func add(a, b int) int {
	return a ^ b + (a&b)<<1
}

func main() {
	a := 1
	b := 1
	fmt.Printf("a+b=%d", add(a, b))
}
